/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sendMail;

import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;

/**
 *
 * @author Dalibor
 */
public class MailWindow extends javax.swing.JFrame {
    
    String errorMessage = "Empty input";

    /**
     * Creates new form MailWindow
     */
    public MailWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtUser = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtMessage = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnSend = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtSubject = new javax.swing.JTextField();
        txtRecipientMail = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserActionPerformed(evt);
            }
        });
        txtUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUserKeyPressed(evt);
            }
        });

        jLabel1.setText("Your mail:");

        txtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPasswordKeyPressed(evt);
            }
        });

        jLabel2.setText("Your password:");

        txtMessage.setToolTipText("");
        txtMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMessageKeyPressed(evt);
            }
        });

        jLabel3.setText("Message dialog box");

        btnSend.setText("Send message");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel4.setText("HOME WORK - SIMPLE MAIL SENDER");

        jLabel5.setText("Mail subject");

        txtSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSubjectActionPerformed(evt);
            }
        });
        txtSubject.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSubjectKeyPressed(evt);
            }
        });

        txtRecipientMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRecipientMailActionPerformed(evt);
            }
        });
        txtRecipientMail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRecipientMailKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRecipientMailKeyReleased(evt);
            }
        });

        jLabel6.setText("Recipient mail:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txtRecipientMail, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(41, 41, 41)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addGap(23, 23, 23)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                        .addComponent(txtSubject)
                        .addComponent(btnSend)
                        .addComponent(jLabel3)))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtRecipientMail, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSend)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserActionPerformed

    private void txtUserKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER ){
               
            if(checkMailAddress(txtUser.getText())){
                JOptionPane.showMessageDialog(rootPane, "Invalid entry");
                txtUser.requestFocus();
            }else{
                txtUser.setText(txtUser.getText().toLowerCase());
                txtPassword.requestFocus();
            }
           
        }
    }//GEN-LAST:event_txtUserKeyPressed

    private void txtPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER ){
               
            if(inputControl(txtPassword.getText())){
                txtRecipientMail.requestFocus();
            }else{
                JOptionPane.showMessageDialog(rootPane, errorMessage);
            }
           
        }
    }//GEN-LAST:event_txtPasswordKeyPressed

    private void txtSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSubjectActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtSubjectActionPerformed

    private void txtSubjectKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSubjectKeyPressed
        // TODO add your handling code here:
         if(evt.getKeyCode() == KeyEvent.VK_ENTER ){
               
            if(inputControl(txtSubject.getText())){
                txtMessage.requestFocus();
            }else{
                 txtSubject.setText("no subject");
                 txtMessage.requestFocus();
            }
           
        }
    }//GEN-LAST:event_txtSubjectKeyPressed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        // TODO add your handling code here:
        if((inputControl(txtUser.getText()))&&(inputControl(txtPassword.getText()))&&(inputControl(txtRecipientMail.getText()))&&(inputControl(txtSubject.getText()))&&(inputControl(txtMessage.getText()))){
                JOptionPane.showMessageDialog(rootPane, "Program is made action to send mail.\nIf mail isn't send, then SMPT server settings are not good in program or your mail\nsettings don't accept third party app");
            }else if(!inputControl(txtUser.getText())){
                JOptionPane.showMessageDialog(rootPane, errorMessage);
                txtUser.requestFocus();
            }else if(checkMailAddress(txtUser.getText())){
                txtUserKeyPressed(null);
            }else if(!inputControl(txtPassword.getText())){
                JOptionPane.showMessageDialog(rootPane, errorMessage);
                txtPassword.requestFocus();
            }else if(!inputControl(txtRecipientMail.getText())){
                JOptionPane.showMessageDialog(rootPane, errorMessage);
                txtRecipientMail.requestFocus();
            }else if(checkMailAddress(txtRecipientMail.getText())){
                txtRecipientMailActionPerformed(null);
            }else if(!inputControl(txtSubject.getText())){
                txtSubject.setText("no subject");
                        
            }else if(!inputControl(txtMessage.getText())){
                txtMessage.setText("empty message");
                        
            }
        txtUser.setText(txtUser.getText().toLowerCase());
        txtRecipientMail.setText(txtRecipientMail.getText().toLowerCase());
        MailLogic.setUSER_NAME(txtUser.getText());
        MailLogic.setPASSWORD(txtPassword.getText());
        MailLogic.setRECIPIENT(txtRecipientMail.getText());
        MailLogic.setSUBJECT(txtSubject.getText());
        MailLogic.setMESSAGE(txtMessage.getText());
        
        String from = MailLogic.getUSER_NAME();
        String pass = MailLogic.getPASSWORD();
        String[] to = { MailLogic.getRECIPIENT() }; // list of recipient email addresses
        String subject = MailLogic.getSUBJECT();
        String body = MailLogic.getMESSAGE();
        
        MailLogic.sendFromGMail(from, pass, to, subject, body);
    }//GEN-LAST:event_btnSendActionPerformed

    private void txtRecipientMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRecipientMailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRecipientMailActionPerformed

    private void txtRecipientMailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRecipientMailKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER ){
               
            if(checkMailAddress(txtRecipientMail.getText())){
                JOptionPane.showMessageDialog(rootPane, "Invalid entry");
                txtRecipientMail.requestFocus();
            }else{
                txtRecipientMail.setText(txtRecipientMail.getText().toLowerCase());
                txtSubject.requestFocus();
            }
           
        }
    }//GEN-LAST:event_txtRecipientMailKeyPressed

    private void txtRecipientMailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRecipientMailKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRecipientMailKeyReleased

    private void txtMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMessageKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER ){
            
        }
    }//GEN-LAST:event_txtMessageKeyPressed

    
    private boolean inputControl(String userInput){
        if(userInput == null || userInput.equals("")){ 
            return false;
        }else{
            return true;
        }
    }
    
    private boolean checkMailAddress(String userMailInput){
        boolean containMonkey = false;
        boolean containPoint = false;

        
        for(char c: userMailInput.toCharArray()){
            if(c == '@'){
                containMonkey = true;
            }else if(c == '.'){
                containPoint = true;
            }
        }
        if(containMonkey&&containPoint){
            return false;
        } else{
            return true;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MailWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MailWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MailWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MailWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MailWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSend;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtMessage;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtRecipientMail;
    private javax.swing.JTextField txtSubject;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables
}
